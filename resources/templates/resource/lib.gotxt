import type { Sveltin } from '$sveltin';
import { orderBy } from '@sveltinio/ts-utils/collections';

export async function list(orderdByDate = true): Promise<Sveltin.MdSveXFile[]> {
	const contentFiles = import.meta.glob('/{{ .Settings.Paths.Content }}/{{ .Resource.Name }}/**/*.{svelte.md,md,svx}');
	const contentFilesArray = Object.entries(contentFiles);

	let contents: Array<Sveltin.MdSveXFile> = await Promise.all(
		contentFilesArray.map(async ([path, resolver]) => {
			const contentItem: { path: string; resolver: Sveltin.MdSveXResolver } = {
				path: path,
				resolver: resolver as unknown as Sveltin.MdSveXResolver
			};

			const data = await contentItem.resolver();

			return {
				metadata: data.metadata
			} satisfies Sveltin.MdSveXFile;
		})
	);

	contents = contents.filter((elem) => !elem.metadata['draft']);
	if (orderdByDate) {
		return orderBy(contents, 'metadata.created_at');
	}

	return contents;
}

{{ $slugName := .Resource.Name | ToSlug -}}
export async function getSingle(slug: string) {
	const resource = '{{ $slugName }}';
	const contentList: Sveltin.MdSveXFile[] = await list();
	const exists = contentList.filter((item) => item.metadata['slug'] == slug);

	if (exists.length == 0) {
		return {
			status: 404
		};
	}

	const selectedIndex = contentList.findIndex((elem) => slug === elem.metadata['slug']);
	const selected = contentList[selectedIndex];

	const current = {
		metadata: selected.metadata as unknown as Sveltin.YAMLFrontmatter
	} satisfies Sveltin.ResourceContent;

	const previous = {
		metadata: {
			title: contentList[selectedIndex + 1]?.metadata['title'],
			slug: contentList[selectedIndex + 1]?.metadata['slug']
		} as Sveltin.YAMLFrontmatter
	} satisfies Sveltin.ResourceContent;

	const next = {
		metadata: {
			title: contentList[selectedIndex - 1]?.metadata['title'],
			slug: contentList[selectedIndex - 1]?.metadata['slug']
		} as Sveltin.YAMLFrontmatter
	} satisfies Sveltin.ResourceContent;

	return {
		status: 200,
		resource,
		current,
		previous,
		next
	};
}
