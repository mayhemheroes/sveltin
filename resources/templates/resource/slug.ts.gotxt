{{- $resourceName := .Resource.Name -}}
{{- $resourceNameAsVar := $resourceName | ToVariableName | ReplaceIfNested -}}
import type { PageLoad } from './$types';
import type { SEOWebPage } from '@sveltinio/seo/types';
import { dev } from '$app/environment';
import { error } from '@sveltejs/kit';
import { getSingle } from '$lib/{{ .Resource.Name }}/load{{ .Resource.Name | ToVariableName | Capitalize }}';
import { website } from '$config/website.js';
import { OpenGraphType, TwitterCardType } from '@sveltinio/seo/types';
import { canonicalURL, makeImagePath } from '@sveltinio/ts-utils/urls';
import { toTitle } from '@sveltinio/ts-utils/strings';

/*
 * Returns values available to the page and page SEO data used
 * by the SEO components in the root layout via the $page.data prop.
 */
export const load = (async ({ url, params }) => {
	const { slug } = params;
	const { resource, status, current, previous, next } = await getSingle(slug);

	if (status != 200) {
		throw error(404, { message: 'Not found' });
	}

	const { metadata } = current;
	const baseUrl = dev ? url.origin : website.baseURL;
	const imagePath = makeImagePath(baseUrl, 'resources', url.pathname, metadata.cover);

	const seoData = {
		url: canonicalURL(baseUrl, url.pathname),
		title: toTitle(metadata.title),
		description: metadata.headline,
		keywords: metadata.keywords.length != 0 ? metadata.keywords : website.keywords,
		author: metadata.author,
		image: imagePath,
		opengraph: {
			type: OpenGraphType.Article,
			article: {
				published_at: new Date(metadata.created_at),
				modified_at: new Date(metadata.updated_at)
			}
		},
		twitter: {
			type: TwitterCardType.Summary
		}
	} satisfies SEOWebPage;

	return {
		resource,
		seoData,
		current,
		previous,
		next
	};

}) satisfies PageLoad;
