{{- $resourceName := .Metadata.Resource | ToVariableName | Capitalize -}}
{{- $mdName := .Metadata.Name | ToSnakeCase -}}
import type { Sveltin } from '$sveltin';
import { groupedByMany } from '@sveltinio/ts-utils/collections';
import { list } from './load{{ $resourceName }}';

export const all = async (): Promise<Sveltin.ContentMetadata[]> => {
	const selectorPath = 'meta.';
	const mdName = '{{ $mdName }}';
	const data = await list();
	const filteredProps = ['title', 'slug', 'headline'].map((path) => selectorPath.concat(path));
	const grouped = groupedByMany(selectorPath.concat(mdName), data, filteredProps);

	return grouped.reduce((acc:  Array<Sveltin.ContentMetadata>, curr) => {
		const { name, items } = curr;

		acc.push({
			name,
			items
		} satisfies Sveltin.ContentMetadata);
		return acc;
	}, []) as Array<Sveltin.ContentMetadata>;
};

export const groupedBy = async (slug: string): Promise<Sveltin.ContentMetadata> => {
	const data = await all();
	const metadata = data.find((item) => {
		return item.name === slug;
	});

	if (metadata) {
		return metadata;
	}

	return undefined;
};
