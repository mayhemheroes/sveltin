{{- $mdName := .Metadata.Name | ToVariableName | Capitalize -}}
import type { PageServerLoad } from './$types';
import type { SEOWebPage } from '@sveltinio/seo/types';
import { dev } from '$app/environment';
import { error } from '@sveltejs/kit';
import { groupedBy } from '$lib/{{ .Metadata.Resource }}/load{{ $mdName }}';
import { website } from '$config/website.js';
import { OpenGraphType, TwitterCardType } from '@sveltinio/seo/types';
import { canonicalURL, defaultImage } from '@sveltinio/ts-utils/urls';
import { toTitle } from '@sveltinio/ts-utils/strings';

//! Edit for page SEO related data.
let pageTitle = '';
let pageDescription = '';
const pageKeywords: Array<string> = [];

/*
 * Returns values available to the page and page SEO data used
 * by the SEO components in the root layout via the $page.data prop.
 */
export const load = (async ({ url, params }) => {
	const { slug } = params;
	const metadata = await groupedBy(slug);

	if (typeof metadata === "undefined") {
		throw error(404, { message: 'Not found' });
	}

	pageTitle = slug;
	pageDescription = `Description for ${pageTitle}.`;

	const baseUrl = dev ? url.origin : website.baseURL;
	const seoData = {
		url: canonicalURL(baseUrl, url.pathname),
		title: toTitle(pageTitle),
		description: pageDescription,
		keywords: pageKeywords.length != 0 ? pageKeywords : website.keywords,
		image: defaultImage(baseUrl),
		opengraph: {
			type: OpenGraphType.Article
		},
		twitter: {
			type: TwitterCardType.Summary
		}
	} satisfies SEOWebPage;

	return {
		mdName: slug,
		seoData,
		metadata
	};
}) satisfies PageServerLoad;
