{{- $mdName := .Metadata.Name | ToVariableName | Capitalize -}}
import type { PageLoad } from './$types';
import type { SEOWebPage } from '@sveltinio/seo/types';
import { dev } from '$app/environment';
import { error } from '@sveltejs/kit';
import { website } from '$config/website.js';
import { OpenGraphType, TwitterCardType } from '@sveltinio/seo/types';
import { canonicalURL, defaultImage } from '@sveltinio/ts-utils/urls';
import { removeTrailingSlash, toTitle } from '@sveltinio/ts-utils/strings';

//! Edit for page SEO related data.
const pageTitle = '{{ .Metadata.Name }}';
const pageDescription = `Description for ${pageTitle} metadata.`;
const pageKeywords: Array<string> = [];

/*
 * Returns values available to the page and page SEO data used
 * by the SEO components in the root layout via the $page.data prop.
 */
export const load = (async ({ fetch, url }) => {
	const mdName = '{{ .Metadata.Name }}';
	const baseUrl = dev ? url.origin : website.baseURL;

	const response = await fetch(`/api/v1${removeTrailingSlash(url.pathname)}.json`);
	const data = await response.json();

	const seoData = {
		url: canonicalURL(baseUrl, url.pathname),
		title: toTitle(pageTitle),
		description: pageDescription,
		keywords: pageKeywords.length != 0 ? pageKeywords : website.keywords,
		image: defaultImage(baseUrl),
		opengraph: {
			type: OpenGraphType.Article
		},
		twitter: {
			type: TwitterCardType.Summary
		}
	} satisfies SEOWebPage;

	if (data) {
		return {
			mdName,
			seoData,
			metadata: data
		};
	}

	throw error(404, `${mdName} not found!`);
}) satisfies PageLoad;
