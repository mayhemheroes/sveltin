<script lang="ts">
	import type { Sveltin } from '$sveltin';
	import { onMount } from 'svelte';
	import { afterNavigate } from '$app/navigation';
	import { assets, base } from '$app/paths';
	import { TOC } from '@sveltinio/widgets/toc';
	import { PagesNavigator } from '@sveltinio/widgets/pages-navigator';

	export let data;

	$: ({ slug, resource, current, previous, next } = data);

	async function retrieveMdSveXComponent(): Promise<Sveltin.MdSvexContentComponent> {
		{{ if .Resource.Group -}}
		const module = await import(`../../../../../content/${resource}/${slug}/index.svx`)
		{{ else -}}
		const module = await import(`../../../../content/${resource}/${slug}/index.svx`);
		{{- end -}}
		return await module.default;
	}

	let mdContentComponent: Promise<Sveltin.MdSvexContentComponent>;

	onMount(async () => {
		mdContentComponent = retrieveMdSveXComponent();
	});

	afterNavigate(async () => {
		mdContentComponent = retrieveMdSveXComponent();
	});
</script>



{#await mdContentComponent}
	<p>Loading content...</p>
{:then mdContentComponent}
	<article class="page-wrapper">
		<h1>{current.metadata.title}</h1>
		<div class="entry-meta">
			{#if current.metadata.created_at}
				<time datetime={current.metadata.created_at}>
					Created At {current.metadata.created_at}
				</time>
			{/if}
			{#if current.metadata.updated_at}
				<time datetime={current.metadata.updated_at}>
					Updated On {current.metadata.updated_at}
				</time>
			{/if}
			{#if current.metadata.readingTime}
				<span>{current.metadata.readingTime.text}</span>
			{/if}
		</div>
		{#if current.metadata.cover}
			<div class="cover">
				<img
					src="{assets}/resources/{resource}/{current.metadata.slug}/{current.metadata.cover}"
					alt="cover image for {current.metadata.title}"
				/>
			</div>
		{/if}

		<TOC data={current.metadata.headings} class="sveltin" />

		<div class="markdown-body max-width-none">
			<svelte:component this={mdContentComponent} />
		</div>

		<PagesNavigator
			prev={ {
				label: previous.metadata.title,
				href: `${base}/${resource}/${previous.metadata.slug}`,
				title: `link to ${previous.metadata.title}`
			} }
			next={ {
				label: next.metadata.title,
				href: `${base}/${resource}/${next.metadata.slug}`,
				title: `link to ${next.metadata.title}`
			} }
		/>
	</article>
{:catch error}
	<p style="color: red">{error.message}</p>
{/await}


<style>
	.entry-meta {
		color: #475569;
		letter-spacing: 0.025em;
		font-size: 1rem; /* 16px */
		line-height: 1.5rem; /* 24px */
		margin-bottom: 10px;
	}

	.entry-meta > time {
		display: inline-block;
		vertical-align: middle;
		position: relative;
		text-transform: capitalize;
	}

	.entry-meta > time:not(:last-child)::after {
		content: '';
		background: #a5a8b2;
		width: 5px;
		height: 5px;
		margin: 0 10px;
		border-radius: 100%;
		display: inline-block;
		vertical-align: middle;
	}

	.cover {
		position: relative;
		padding-bottom: calc(9 / 16 * 100%);
		margin-bottom: 2rem;
	}

	.cover > * {
		position: absolute;
		height: 100%;
		width: 100%;
		top: 0;
		right: 0;
		bottom: 0;
		left: 0;
	}

	.cover img {
		object-fit: cover;
		border-radius: 0.75rem;
	}
</style>
