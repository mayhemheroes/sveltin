<script lang="ts">
	import type { Sveltin } from '$sveltin';
	import { onMount } from 'svelte';
	import { afterNavigate } from '$app/navigation';
	import { assets, base } from '$app/paths';
	import { TOC } from '@sveltinio/widgets/toc';
	import { PagesNavigator } from '@sveltinio/widgets/pages-navigator';

	export let data;

	$: ({ slug, resource, current, previous, next } = data);

	async function retrieveMdSveXComponent(): Promise<Sveltin.MdSvexContentComponent> {
		const module = await import(`../../../../content/${resource}/${slug}/index.svx`);
		return await module.default;
	}

	let mdContentComponent: Promise<Sveltin.MdSvexContentComponent>;

	onMount(async () => {
		mdContentComponent = retrieveMdSveXComponent();
	});

	afterNavigate(async () => {
		mdContentComponent = retrieveMdSveXComponent();
	});
</script>

{#await mdContentComponent}
	<p>Loading content...</p>
{:then mdContentComponent}
<article>
	<div>
		<h1>{current.metadata.title}</h1>
		{#if current.metadata.created_at}
			<time datetime={current.metadata.created_at}>
				Created At {current.metadata.created_at}
			</time>
		{/if}
		{#if current.metadata.updated_at}
			<time datetime={current.metadata.updated_at}>
				Updated On {current.metadata.updated_at}
			</time>
		{/if}
		{#if current.metadata.readingTime}
			<p><span>{current.metadata.readingTime.text}</span></p>
		{/if}
	</div>
	{#if current.metadata.cover}
		<img
			src="{assets}/resources/{resource}/{current.metadata.slug}/{current.metadata.cover}"
			alt="cover image for {current.metadata.title}"
		/>
	{/if}

	<TOC data={current.metadata.headings} />

	<div class="markdown-body max-width-none">
		<svelte:component this={mdContentComponent} />
	</div>

	<PagesNavigator
		prev={ {
			label: previous.metadata.title,
			href: `${base}/${resource}/${previous.metadata.slug}`,
			title: `link to ${previous.metadata.title}`
		} }
		next={ {
			label: next.metadata.title,
			href: `${base}/${resource}/${next.metadata.slug}`,
			title: `link to ${next.metadata.title}`
		} }
	/>
</article>
{:catch error}
	<p style="color: red">{error.message}</p>
{/await}

<style>
	article {
		box-sizing: border-box;
		min-width: 200px;
		max-width: 980px;
		margin: 16px auto;
		display: flex;
		flex-direction: column;
	}

	h1 {
		font-size: 2em;
	}

	img {
		margin: 8px 0;
	}
</style>
